{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOzRppWeqdUJI62/r9wpgCH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"tCoVHvZO7r9T","executionInfo":{"status":"ok","timestamp":1686663827832,"user_tz":-330,"elapsed":8,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"outputs":[],"source":["from google.colab import drive"]},{"cell_type":"code","source":["drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IRlTETC9_zx4","executionInfo":{"status":"ok","timestamp":1686663969003,"user_tz":-330,"elapsed":141177,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}},"outputId":"f863102c-5b3b-44f8-fde8-f5a8d21e9e97"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["HOME_DIR = '/content/gdrive/MyDrive/celebal1'"],"metadata":{"id":"dFRDSCIL_2bK","executionInfo":{"status":"ok","timestamp":1686664103553,"user_tz":-330,"elapsed":3,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error\n"],"metadata":{"id":"NsCQH3CMA6bF","executionInfo":{"status":"ok","timestamp":1686664142673,"user_tz":-330,"elapsed":2182,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["train_data_1 = pd.read_csv('/content/gdrive/MyDrive/celebal1/Training Data/Linear_X_Train.csv')\n","train_data_2 = pd.read_csv('/content/gdrive/MyDrive/celebal1/Training Data/Linear_Y_Train.csv')\n","train_data = pd.concat([train_data_1, train_data_2], ignore_index=True)"],"metadata":{"id":"mszw99B-BFG1","executionInfo":{"status":"ok","timestamp":1686664697527,"user_tz":-330,"elapsed":1249,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["test_data = pd.read_csv('/content/gdrive/MyDrive/celebal1/Testing Data/Linear_X_Test.csv')"],"metadata":{"id":"YaWVzrS8Cioc","executionInfo":{"status":"ok","timestamp":1686664780061,"user_tz":-330,"elapsed":718,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["print(\"Training Data Summary:\")\n","print(train_data.info())\n","print(train_data.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cv95nG-dDgAn","executionInfo":{"status":"ok","timestamp":1686664823483,"user_tz":-330,"elapsed":6,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}},"outputId":"a1d1bfb4-25a8-4f1d-cf0f-f7581df451ac"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Data Summary:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7500 entries, 0 to 7499\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   x       3750 non-null   float64\n"," 1   y       3750 non-null   float64\n","dtypes: float64(2)\n","memory usage: 117.3 KB\n","None\n","                 x            y\n","count  3750.000000  3750.000000\n","mean     -0.037795     0.683869\n","std       0.992212    81.102629\n","min      -3.546299  -286.959739\n","25%      -0.698443   -54.036989\n","50%      -0.035028     0.180640\n","75%       0.629425    54.695511\n","max       4.091393   348.899461\n"]}]},{"cell_type":"code","source":["print(\"Testing Data Summary:\")\n","print(test_data.info())\n","print(test_data.describe())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I8PTjJCVDr3E","executionInfo":{"status":"ok","timestamp":1686664851092,"user_tz":-330,"elapsed":5,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}},"outputId":"2859839d-11a8-4e58-97df-cf0438a17178"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing Data Summary:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1250 entries, 0 to 1249\n","Data columns (total 1 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   x       1250 non-null   float64\n","dtypes: float64(1)\n","memory usage: 9.9 KB\n","None\n","                 x\n","count  1250.000000\n","mean     -0.040106\n","std       1.004994\n","min      -2.620627\n","25%      -0.713155\n","50%      -0.044434\n","75%       0.628936\n","max       3.700396\n"]}]},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer"],"metadata":{"id":"yepu-lLdFroj","executionInfo":{"status":"ok","timestamp":1686665348206,"user_tz":-330,"elapsed":584,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["imputer = SimpleImputer(strategy='mean')\n","train_data[['x', 'y']] = imputer.fit_transform(train_data[['x', 'y']])"],"metadata":{"id":"tZvl6YcrFsqp","executionInfo":{"status":"ok","timestamp":1686665367690,"user_tz":-330,"elapsed":432,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["X = train_data['x'].values.reshape(-1, 1)\n","y = train_data['y'].values\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"5LtJm9ThDyhT","executionInfo":{"status":"ok","timestamp":1686665369951,"user_tz":-330,"elapsed":435,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["model = LinearRegression()"],"metadata":{"id":"oI9vCRIvD4fn","executionInfo":{"status":"ok","timestamp":1686665372001,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["model.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"ls6rY8-EFUiH","executionInfo":{"status":"ok","timestamp":1686665373455,"user_tz":-330,"elapsed":7,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}},"outputId":"a93ac7cf-67ca-4ed5-c664-f8967b2de45d"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["y_val_pred = model.predict(X_val)\n","mse = mean_squared_error(y_val, y_val_pred)\n","print(f\"Mean Squared Error: {mse}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rl3ZJqnEFWQz","executionInfo":{"status":"ok","timestamp":1686665387202,"user_tz":-330,"elapsed":462,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}},"outputId":"02e3ad5e-1a95-439a-8040-636f9d43ae2b"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error: 3365.7663388895567\n"]}]},{"cell_type":"code","source":["X_test = test_data['x'].values.reshape(-1, 1)\n","y_test_pred = model.predict(X_test)\n"],"metadata":{"id":"qrCnCdKyF1hI","executionInfo":{"status":"ok","timestamp":1686665395775,"user_tz":-330,"elapsed":428,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["output = pd.DataFrame({'score': y_test_pred})\n","output.to_csv('predicted_scores.csv', index=False)"],"metadata":{"id":"efDYEHOiF3mz","executionInfo":{"status":"ok","timestamp":1686665401576,"user_tz":-330,"elapsed":409,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n"],"metadata":{"id":"CFJFWvuQHncP","executionInfo":{"status":"ok","timestamp":1686665856221,"user_tz":-330,"elapsed":428,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["plt.scatter(train_data['x'], train_data['y'], label='Training Data', color='red')\n","plt.plot(test_data['x'], output['score'], color='black', label='Predictions')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"OBcEeIY0F5CE","executionInfo":{"status":"ok","timestamp":1686665950439,"user_tz":-330,"elapsed":1376,"user":{"displayName":"Shagun Singh","userId":"05001043686808957886"}},"outputId":"f23817f4-916f-43d5-98d9-e6158cb40dea"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"ybifPczJHcRh"},"execution_count":null,"outputs":[]}]}